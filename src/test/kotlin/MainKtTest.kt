import kotlin.test.*internal class MainKtTest {    @Test    fun testReverseInteger() {        var expected = 321        assertEquals(expected, reverseInteger(123))        expected = -321        assertEquals(expected, reverseInteger(-123))        expected = 0        assertEquals(expected, reverseInteger(0))    }    @Test    fun testContainsDoubles() {        assertTrue(containsDoubles(intArrayOf(1, 2, 3, 4, 4)))        assertTrue(containsDoubles(intArrayOf(0, 0)))        assertFalse(containsDoubles(intArrayOf(1, 2, 3, 4, 5)))        assertFalse(containsDoubles(intArrayOf()))        assertFalse(containsDoubles(intArrayOf(0)))    }    @Test    fun testValidAnagram() {        assertTrue(validAnagram("param", "ramap"))        assertFalse(validAnagram("rarap", "papar"))    }    @Test    fun testFirstUniqueCharacter() {        assertEquals(0, firstUniqueCharacter("letcode"))        assertEquals(1, firstUniqueCharacter("unique"))        assertEquals(0, firstUniqueCharacter("sambe"))    }    @Test    fun testValidPalindrome() {        assertTrue(validPalindrome("A man, a plan, a canal: Panama"))        assertFalse(validPalindrome("B man, a plan, a canal: Panama"))    }    @Test    fun testFizzBuzz() {        assertEquals(fizzBuzz(5), listOf("1", "2", "Fizz", "4", "Buzz"))        assertEquals(            fizzBuzz(15),            listOf(                "1", "2", "Fizz", "4", "Buzz",                "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz"            )        )    }    @Test    fun testAcrossLists() {        assertEquals(            acrossLists(intArrayOf(1, 2, 3, 4, 5), intArrayOf(1, 3, 3)),            listOf<Int>(1, 3)        )        assertEquals(            acrossLists(intArrayOf(1, 2, 2, 2, 5), intArrayOf(1, 3, 5, 2, 2)),            listOf<Int>(1, 2, 2, 5)        )    }    @Test    fun testCountLetters() {        assertEquals(            countLetters("AAABBBAACCCC"),            "A3B3A2C4"        )        assertEquals(            countLetters("AAA"),            "A3"        )        assertEquals(            countLetters("BAACCAACCAA"),            "B1A2C2A2C2A2"        )    }    @Test    fun testBracketsWithArrayDequeue() {        assertTrue(            bracketsWithArrayDequeue("()")        )        assertTrue(            bracketsWithArrayDequeue("{([])}")        )        assertTrue(            bracketsWithArrayDequeue("()[]{}[]()")        )        assertTrue(            bracketsWithArrayDequeue("([(){[[]]}])")        )        assertFalse(            bracketsWithArrayDequeue("(]")        )        assertFalse(            bracketsWithArrayDequeue("))")        )        assertFalse(            bracketsWithArrayDequeue("((")        )        assertFalse(            bracketsWithArrayDequeue("(()")        )    }    @Test    fun testCheckIfExist() {        assertTrue(checkIfExist(intArrayOf(2, 2, 3, 4, 10, 9)))        assertTrue(checkIfExist(intArrayOf(5, 3, 4, 10, 9)))        assertTrue(checkIfExist(intArrayOf(-10, 12, -20, -8, 15)))        assertFalse(checkIfExist(intArrayOf(2, 2, 2, 9)))        assertFalse(checkIfExist(intArrayOf(1, 1, 3, 9)))        assertFalse(checkIfExist(intArrayOf(-16, -13, 8)))        assertFalse(checkIfExist(intArrayOf(-2, 0, 10, -19, 4, 6, -8)))    }}